class AttackTracerBehavior : ZilchComponent
{
    [Property]
    var LifeTime : Real = 0.25;
    
    [Property]
    var Damage : Integer = 1;
    
    [Property]
    var NumTargetsHittable : Integer = 0; //maximum number of targets that the tracer can hit before it dies, 0 for infinite
    
    var Knockback : Real3 = Real3(0,0,0);
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnHit);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        this.Owner.Collider.DebugDraw();
        this.LifeTime -= event.Dt;
        if(this.LifeTime < 0)
        {
            this.KillSelf();
        }
    }
    
    function OnHit(event : CollisionEvent)
    {
        //Console.WriteLine(event.OtherObject);
        if(event.OtherObject.EntityHealth != null)
        {
            event.OtherObject.EntityHealth.TakeDamage(this.Damage);
            event.OtherObject.RigidBody.ApplyLinearVelocity(this.Knockback);
            this.Space.CreateAtPosition(Archetype.Sparks, event.FirstPoint.WorldPoint + Real3(0, 0, 1));
            if(this.NumTargetsHittable != 0)
            {
                --this.NumTargetsHittable;
                if(this.NumTargetsHittable < 1)
                {
                    this.KillSelf();
                }
            }
        }
    }
    
    function KillSelf()
    {
        this.Owner.Destroy();
    }
}
