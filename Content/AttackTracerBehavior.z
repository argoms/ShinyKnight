/*
AttackTracerBehavior
@James/Argoms
    Behavior for attack tracers (Collision boxes generated by attacks).
*/
class AttackTracerBehavior : ZilchComponent
{
    [Property]
    var LifeTime : Real = 0.25; //time before tracer disappears
    
    [Property]
    var Damage : Integer = 1; //default damage, generally overwritten except for projectiles
    
    [Property]
    var NumTargetsHittable : Integer = 0; //maximum number of targets that the tracer can hit before it dies, 0 for infinite
    
    [Property]
    var KillOnTouchAnything : Boolean = false; //kill projectile if it hits walls instead of just enemies?
    
    var Knockback : Real3 = Real3(0,0,0);
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnHit);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        //this.Owner.Collider.DebugDraw();
        
        //kill self after <LifeTime> seconds pass: 
        this.LifeTime -= event.Dt;
        if(this.LifeTime < 0)
        {
            this.KillSelf();
        }
    }
    
    /*
    OnHit
        Called when the tracer collides with another object (note that tracers have specific collision groups to avoid hitting their creators/allies etc.)
    */
    function OnHit(event : CollisionEvent)
    {
        //Console.WriteLine(event.OtherObject);
        
        if(event.OtherObject.EntityHealth != null) //behavior if hit object has health
        {
            //do damage:
            event.OtherObject.EntityHealth.TakeDamage(this.Damage);
            
            //apply knockback:
            event.OtherObject.RigidBody.ApplyLinearVelocity(this.Knockback);
            
            //create a particle effect at hit location:
            this.Space.CreateAtPosition(Archetype.Sparks, event.FirstPoint.WorldPoint + Real3(0, 0, 1));
            
            //if relevant, change the targets hit counter (used for determining the maximum number of enemies that an attack can hit)
            if(this.NumTargetsHittable != 0)
            {
                --this.NumTargetsHittable;
                if(this.NumTargetsHittable < 1)
                {
                    this.KillSelf();
                }
            }
        }
        
        //kill object if walls are hit (generally used for projectiles)
        if(this.KillOnTouchAnything && event.OtherObject.EnemyAggroZone == null)
        {
            //Console.WriteLine(event.OtherObject);
            this.KillSelf();
        }
    }
    
    /*
    KillSelf
        Called when the tracer needs to be destroyed
    */
    function KillSelf()
    {
        this.Owner.Destroy();
    }
}
