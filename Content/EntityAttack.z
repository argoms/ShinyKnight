/*
EntityAttack
@James/Argoms
    Behavior for entities (players/enemies) to attack. Includes both melee (tracer-based) and projectile (archetype-spawning-based) attacks.
*/
class EntityAttack : ZilchComponent
{
    var Attacking : Boolean = false; //whether or not entity is currently attacking
    
    var Cooldown : Real = 0; //how long until the entity stops being in the attacking state, INTERNAL COUNTER, NOT STARTING VALUE
    
    var Windup : Real = 0; //how long of a delay before the attack starts, INTERNAL COUNTER, NOT STARTING VALUE
    
    var Aim : Real3; //attack direction
    
    var BaseCooldown : Real = 0.2; //cooldown value on beginning attack
    
    [Property]
    var BaseWindup :Real = 0.1; //windup value on beginning attack
    
    var Damage : Integer = 1; //damage done by attack (default value almost always overwritten)
    
    var StaggerTimer : Real = 0; //if more than 0, how long the entity is staggered for
    
    [Property]
    var Knockback : Real = 5; //linear velocity applied to enemies upon getting hit
    
    [Property]
    var Friendly : Boolean; //true if it's a friendly, false if it's an enemy attack
    
    [Property]
    var MinRange : Real = 1; //how many units away the attack tracer is spawned
    
    [Property]
    var Projectile : Archetype; //projectile fired by the entity
    
    var ShootMode : String; //attack mode, "Melee" for melee and "Proj" for projectile
    
    var AttackCollision : MultiConvexMesh = MultiConvexMesh.KATracer1_1; //the collider used for attacks
    
    var TracerLifetime : Real = 0.25; //how long a tracer lasts before despawning
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        if(this.StaggerTimer > 0) //decrease stagger timer if staggered
        {
            this.StaggerTimer -= event.Dt;
        }
        
        if(this.Attacking) //behavior if entity is currently attacking (includes windup time and cooldown time)
        {
            if(this.Windup > 0) //if the entity is still winding up... 
            {
                this.Windup -= event.Dt;
                
                //only triggers on the frame that windup goes from more than to less than zero
                if(this.Windup < 0) 
                {
                    
                    if(this.ShootMode == "Melee") //melee attack code
                    {
                        //create attack tracer & parent it to the entity:
                        var tracer = this.Space.CreateAtPosition(Archetype.AttackTracer, Real3(0,1,0) * this.MinRange);
                        tracer.AttachTo(this.Owner);
                        
                        //set tracer attributes (damage/knockback/lifetime)
                        tracer.AttackTracerBehavior.Damage = this.Damage;
                        tracer.AttackTracerBehavior.Knockback = this.Knockback * this.Aim;
                        tracer.AttackTracerBehavior.LifeTime = this.TracerLifetime;
                        
                        
                        //set tracer collision group 
                        if(this.Friendly)
                        {
                            tracer.Collider.CollisionGroup = CollisionGroup.FriendlyProjectile;
                        } else {
                            tracer.Collider.CollisionGroup = CollisionGroup.EnemyProjectile;
                        }
                        
                        //set tracer collision mesh:
                        tracer.MultiConvexMeshCollider.Mesh = this.AttackCollision;
                        
                    } else if(this.ShootMode == "Proj") //projectile attack code
                    {
                        //create a projectile
                        var bullet = this.Space.CreateAtPosition(this.Projectile, this.Owner.Transform.Translation);
                        
                        //set projectile velocity:
                        bullet.RigidBody.Velocity = this.Aim * bullet.ProjectileBehavior.Speed;
                    }
                    
                }
            } else {
                
                //force entity to wait for cooldown to finish before another attack can begin
                this.Cooldown -= event.Dt;
                
                if(this.Cooldown < 0)
                {
                    this.Attacking = false;
                    
                    //tells playercontrol that an action is finished if that's part of the entity:
                    if(this.Owner.PlayerControl != null)
                    {
                        this.Owner.PlayerControl.ActionFinishedFlag = true;
                    }
                }
            }
        }
    }
    
    /*
    Attack
        Called by other components for melee attacks.
    */
    function Attack(aim : Real3)
    {
        //only functions if not currently staggered:
        if(this.StaggerTimer <= 0)
        {
            this.Attacking = true;
            this.Cooldown = this.BaseCooldown;
            this.Windup = this.BaseWindup;
            this.Aim = aim;
            this.ShootMode = "Melee";
        }
        
    }
    
    /*
    ShootProjectile
        Called by other components for projectile attacks.
    */
    function ShootProjectile(aim : Real3)
    {
        this.Attacking = true;
        this.Cooldown = this.BaseCooldown;
        this.Windup = this.BaseWindup;
        this.Aim = aim;
        this.ShootMode = "Proj";
    }
}
