/*
    EnemyHealth
    @James/Argoms
    
    Component managing health points of enemies. Shamelesly stolen from dave.
*/
class EntityHealth : ZilchComponent
{
    [Property]
    var Health:Integer = 5; //kills object if health hits 0
    
    var RandomGenerator:Random = Random();//random number generator
    
    [Property]
    var Important:Boolean = true; //whether or not this enemy adjusts the level's enemy counter
    
    var DamageColor : Real4 = Real4(1,1,1,1); //color of text that pops up when entity is damaged, default white
    
    [Property]
    var StaggerDamage : Integer = 2; //amount of damage taken to stagger
    
    [Property]
    var StaggerTimer : Real = 1; //rate at which the stagger cooldown decreases
    
    [Property]
    var StaggerTime : Real = 1; //amount of time that the entity is staggered for by default
    
    var SDCounter : Integer = 0; //internal counter for stagger damage
    
    var STCounter : Real = 0; //internal counter for stagger timing
    
    var Blocking : Boolean;
    
    [Property]
    var MaxStamina : Real= 50;
    
    [Property]
    var StaminaRegenRate : Real = 20;
    
    [Property]
    var ShowDamageNumbers : Boolean = true;
    
    [Property]
    var CanStagger : Boolean = true;
    
    var Stamina : Real = 0;
    function Initialize(init : CogInitializer)
    {
        //this.Health *= this.LevelSettings.LevelBehavior.Difficulty;
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        
        if(this.SDCounter > 0)
        {
            this.STCounter += event.Dt;
            if(this.STCounter > this.StaggerTimer)
            {
                this.SDCounter = 0;
                this.STCounter = 0;
            }
        }
        
        if(this.Stamina < this.MaxStamina)
        {
            this.Stamina += (event.Dt * this.StaminaRegenRate);
            if(this.Stamina > this.MaxStamina)
            {
                this.Stamina = this.MaxStamina;
            }
        }
    }
    
    function TakeDamage(damage : Integer) //called when taking damage
    {
        if(this.Owner.AutoOrientToVelocity != null)
        {
            //this.Owner.RemoveComponentByName("AutoOrientToVelocity");
        }
        if(this.Blocking)
        {
            this.Stamina -= damage * 8;
            damage = 0;
            
        }
        //actually subtract health:
        this.Health -= damage;
        this.SDCounter += damage;
        if(this.SDCounter >= this.StaggerDamage)
        {
            this.Stagger();
        }
        
        //create damage text popup:
        if(this.ShowDamageNumbers)
        {
            var damageText : Cog = this.Space.CreateAtPosition(Archetype.DamageText, this.Owner.Transform.Translation + Real3(0,0,5));
            damageText.SpriteText.Text = "`damage`";
        }
        
        if (this.Health < 1)
        {
            this.Die();
            this.Owner.Destroy();
            //this.AddScore.AddToScore();
        }
        
        //Console.WriteLine(this.Health);
    }
    
    function Die()
    {
        if(this.Owner.EntityDeathExplosion != null)
        {
            this.Owner.EntityDeathExplosion.OnKill();
        }
        //adjust number of enemies left in level:
        if(this.Important)
        {
            if(this.Owner.ZombieAI != null)
            {
                this.Owner.ZombieAI.AggroZone.Cog.EnemyAggroZone.EnemyKilled();
            }
            //--this.Owner.LevelSettings.LevelBehavior.EnemyCounter;
            //this.Important = false;
        }
        
        //explosion:
    }
    
    function Stagger()
    {
        if(this.CanStagger)
        {
            var damageText : Cog = this.Space.CreateAtPosition(Archetype.DamageText, this.Owner.Transform.Translation + Real3(0,0,5));
            damageText.SpriteText.Text = "   ow :(";
            if(this.Owner.EntityAttack.Attacking)
            {
                //Console.WriteLine(this.Owner);
                this.Owner.EntityAttack.Attacking = false;
            }
            this.Owner.EntityAttack.StaggerTimer = this.StaggerTime;
        }
    }
}
