/*
MapGeneration
    The game originally was planned to have procedural map generation. It was moved to a stretch goal and did not make the deadline. 
    None of this code is used in the game.
*/
class MapGeneration : ZilchComponent
{
    var Map:Array[Array[MapObject]] = new Array[Array[MapObject]]();
    
    var MapHeight:Integer = 32;
    var MapWidth:Integer = 32;
    var RNG:Random = new Random();
    
    var PlayerEntity : Cog;
    
    function Initialize(init : CogInitializer)
    {
        this.RNG.Seed = 1;
        
        
        this.CreateBlankMap();
        
        //spawn some random stufF:
        this.Map[1][1] = new MapObject(3, 0);
        this.Map[3][2] = new MapObject(2, 0);
        this.Map[6][6] = new MapObject(4, 0);
        
        this.GenerateMap();
        
        
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
    }
    
    //creates a blank map with border walls:
    function CreateBlankMap() 
    {
        for(var i : Integer = 0; i < this.MapWidth; i += 1)
        {
            this.Map.Add(new Array[MapObject]());
            for(var j : Integer = 0; j < this.MapHeight; j += 1)
            {
                this.Map[i].Add(new MapObject(0, 0));
                
                if(j == this.MapHeight -1 || i == this.MapWidth -1 || j == 0 || i == 0)
                {
                    //creates border walls:
                    this.Map[i][j] = (new MapObject(1, 0));
                } else {
                    //blank space otherwise:
                    this.Map[i][j] = (new MapObject(0, 0));
                }
            }
        }
    }
    
    function GenerateMap()
    {
        for(var i : Integer = 0; i < this.MapWidth; i += 1)
        {
            for(var j : Integer = 0; j < this.MapHeight; j += 1)
            {
                //spawn objects according  to tile map
                if(this.Map[i][j].Type == 1)
                {
                    this.Space.CreateAtPosition(Archetype.WallTile, Real3(i, j, 0)); 
                } else if(this.Map[i][j].Type == 2)
                {
                    this.Space.CreateAtPosition(Archetype.WeirdWallTile, Real3(i, j, 0)); 
                } else if(this.Map[i][j].Type == 3)
                {
                    var player:Cog = this.Space.CreateAtPosition(Archetype.Player, Real3(i, j, 0)); 
                    this.PlayerEntity = player;
                    
                } else if(this.Map[i][j].Type == 4)
                {
                    var enemy:Cog = this.Space.CreateAtPosition(Archetype.BasicEnemy, Real3(i, j, 0)); 
                    enemy.ZombieAI.TargetEntity = this.PlayerEntity;
                }
            }
        }
    }
}
